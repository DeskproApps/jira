import { components } from "./schema";
import { AvatarUrls } from "./types";
// Generated by https://quicktype.io

export interface CreateMeta {
  expand: string;
  projects: ProjectElement[];
}

export interface ProjectElement {
  expand: string;
  self: string;
  id: string;
  key: AllowedValueKey;
  name: string;
  avatarUrls: { [key: string]: string };
  issuetypes: Issuetype[];
}

export interface Issuetype {
  self: string;
  id: string;
  description: string;
  iconUrl: string;
  name: string;
  untranslatedName: string;
  subtask: boolean;
  expand: Expand;
  fields: Record<string, Assignee | Attachment>;
  scope?: Scope;
}

export type Priority = Required<Pick<
  components["schemas"]["Priority"],
  "iconUrl"|"id"|"name"|"self"
>>;

export type Project = {
  id: string;
  key: string;
  name: string;
  projectTypeKey: string;
  self: string;
  avatarUrls: AvatarUrls;
  simplified: boolean;
};

export type Option = {
  id: string;
  self: string;
  value: string;
  name?: string;
  valueLabel?: string;
  color?: string;
};

export enum Expand {
  Fields = "fields",
}

export interface Assignee {
  required: boolean;
  schema: AssigneeSchema;
  name: string;
  key: PurpleKey;
  autoCompleteUrl?: string;
  hasDefaultValue: boolean;
  operations: Operation[];
  allowedValues?: AssigneeAllowedValue[];
  defaultValue?: Value;
}

export interface AssigneeAllowedValue {
  value: string;
  self: string;
  id: string;
  description?: string;
  iconUrl?: string;
  name: string;
  subtask?: boolean;
  avatarId?: number;
  hierarchyLevel?: number;
  entityId?: string;
  key?: AllowedValueKey;
  projectTypeKey?: ProjectTypeKey;
  simplified?: boolean;
  avatarUrls?: { [key: string]: string };
}

export enum AllowedValueKey {
  CSM = "CSM",
  Demo = "DEMO",
  Tp = "TP",
}

export enum ProjectTypeKey {
  ServiceDesk = "service_desk",
  Software = "software",
}

export interface Value {
  self: string;
  id: string;
  name: string;
  description?: string;
  iconUrl?: string;
  value: string;
}

export enum DefaultValueName {
  High = "High",
  Highest = "Highest",
  Intranet = "Intranet",
  Jira = "Jira",
  Low = "Low",
  Lowest = "Lowest",
  Medium = "Medium",
  PublicWebsite = "Public website",
}

export enum PurpleKey {
  Assignee = "assignee",
  Description = "description",
  Duedate = "duedate",
  Issuetype = "issuetype",
  Parent = "parent",
  Priority = "priority",
  Project = "project",
  Reporter = "reporter",
  Summary = "summary",
}

export enum AssigneeName {
  Assignee = "Assignee",
  Description = "Description",
  DueDate = "Due date",
  IssueType = "Issue Type",
  Parent = "Parent",
  Priority = "Priority",
  Project = "Project",
  Reporter = "Reporter",
  Summary = "Summary",
}

export enum Operation {
  Add = "add",
  Copy = "copy",
  Remove = "remove",
  Set = "set",
}

export interface AssigneeSchema {
  type: string; //PurpleType;
  system: PurpleKey;
  custom: string;
  items: string;
}

export enum PurpleType {
  Date = "date",
  Issuelink = "issuelink",
  Issuetype = "issuetype",
  Priority = "priority",
  Project = "project",
  String = "string",
  User = "user",
  Number = "number",
}

export interface Attachment {
  required: boolean;
  schema: AttachmentSchema;
  name: string;
  key: FluffyKey;
  hasDefaultValue: boolean;
  operations: Operation[];
  allowedValues?: Value[];
  autoCompleteUrl?: string;
}

export enum FluffyKey {
  Attachment = "attachment",
  Components = "components",
  Issuelinks = "issuelinks",
  Labels = "labels",
}

export enum AttachmentName {
  Attachment = "Attachment",
  Components = "Components",
  Labels = "Labels",
  LinkedIssues = "Linked Issues",
}

export interface AttachmentSchema {
  type: FluffyType;
  items: PurpleItems;
  system: FluffyKey;
  custom: string;
}

export enum PurpleItems {
  Attachment = "attachment",
  Component = "component",
  Issuelinks = "issuelinks",
  String = "string",
}

export enum FluffyType {
  Any = "any",
  Array = "array",
  Date = "date",
  Option = "option",
  String = "string",
}

export interface PurpleAllowedValue {
  self: string;
  value: string;
  id: string;
}

export interface PurpleSchema {
  type: FluffyType;
  custom: string;
  customId: number;
  items?: FluffyItems;
}

export enum FluffyItems {
  Option = "option",
  SDCustomerorganization = "sd-customerorganization",
  User = "user",
}

export interface Scope {
  type: string;
  project: ScopeProject;
}

export interface ScopeProject {
  id: string;
}
